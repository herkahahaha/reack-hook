{"version":3,"sources":["context/bookContext.js","component/Navbar.js","component/BookDetails.js","component/BookList.js","component/NewBook.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","title","author","id","books","setBooks","Provider","value","addBook","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","NewBook","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAEaA,EAAcC,0BAmBZC,EAjBa,SAAAC,GAAU,IAAD,EACTC,mBAAS,CACjC,CAAEC,MAAO,cAAeC,OAAQ,eAAgBC,GAAI,GACpD,CAAEF,MAAO,mBAAoBC,OAAQ,cAAeC,GAAI,KAHvB,mBAC5BC,EAD4B,KACrBC,EADqB,KAWnC,OACE,kBAACT,EAAYU,SAAb,CAAsBC,MAAO,CAAEH,QAAOI,QAPxB,SAACP,EAAOC,GACtBG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEH,QAAOC,SAAQC,GAAI,OAMMM,WAJ9B,SAAAN,GACjBE,EAASD,EAAMM,OAAO,SAAAC,GAAI,OAAIA,EAAKR,KAAOA,QAIvCJ,EAAMa,WCLEC,EATA,WAAO,IACZT,EAAUU,qBAAWlB,GAArBQ,MACR,OACE,yBAAKW,UAAU,UACb,iDACA,qDAA2BX,EAAMY,OAAjC,mBCKSC,EATK,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACbF,EAAeK,qBAAWlB,GAA1Ba,WACR,OACE,wBAAIS,QAAS,kBAAMT,EAAWE,EAAKR,MACjC,yBAAKY,UAAU,SAASJ,EAAKV,OAC7B,yBAAKc,UAAU,UAAUJ,EAAKT,UCWrBiB,EAhBE,WAAO,IACdf,EAAUU,qBAAWlB,GAArBQ,MACR,OAAOA,EAAMY,OAEX,yBAAKD,UAAU,aACb,4BACGX,EAAMgB,IAAI,SAAAT,GACT,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAMU,IAAKV,EAAKR,SAMhD,yBAAKY,UAAU,SAAf,6BCgBWO,EA9BC,WAAO,IACbd,EAAYM,qBAAWlB,GAAvBY,QADY,EAEMR,mBAAS,IAFf,mBAEbC,EAFa,KAENsB,EAFM,OAGQvB,mBAAS,IAHjB,mBAGbE,EAHa,KAGLsB,EAHK,KAUpB,OACE,0BAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACFnB,EAAQP,EAAOC,GACfqB,EAAS,IACTC,EAAU,MAIR,2BACEI,KAAK,OACLC,YAAY,aACZtB,MAAON,EACP6B,SAAU,SAAAJ,GAAC,OAAIH,EAASG,EAAEK,OAAOxB,QACjCyB,UAAQ,IAEV,2BACEJ,KAAK,OACLC,YAAY,cACZtB,MAAOL,EACP4B,SAAU,SAAAJ,GAAC,OAAIF,EAAUE,EAAEK,OAAOxB,QAClCyB,UAAQ,IAEV,2BAAOJ,KAAK,SAASrB,MAAM,eCVlB0B,MAbf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,2CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.655d9309.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = props => {\r\n  const [books, setBooks] = useState([\r\n    { title: \"teman hidup\", author: \"andaru intan\", id: 1 },\r\n    { title: \"tuhan maha asyik\", author: \"sujiwo tejo\", id: 2 }\r\n  ]);\r\n  const addBook = (title, author) => {\r\n    setBooks([...books, { title, author, id: 4 }]);\r\n  };\r\n  const removeBook = id => {\r\n    setBooks(books.filter(book => book.id !== id));\r\n  };\r\n  return (\r\n    <BookContext.Provider value={{ books, addBook, removeBook }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  );\r\n};\r\nexport default BookContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../context/bookContext\";\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Mari Membaca Bung</h1>\r\n      <p>sekarang kamu memiliki {books.length} untuk dibaca</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../context/bookContext\";\r\n\r\n// parsing props book\r\nconst BookDetails = ({ book }) => {\r\n  const { removeBook } = useContext(BookContext);\r\n  return (\r\n    <li onClick={() => removeBook(book.id)}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  );\r\n};\r\nexport default BookDetails;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../context/bookContext\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nconst BookList = () => {\r\n  const { books } = useContext(BookContext);\r\n  return books.length ? (\r\n    // if true\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map(book => {\r\n          return <BookDetails book={book} key={book.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    // false\r\n    <div className=\"empty\">free time mari hibernasi</div>\r\n  );\r\n};\r\nexport default BookList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { BookContext } from \"../context/bookContext\";\r\n\r\nconst NewBook = () => {\r\n  const { addBook } = useContext(BookContext);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    addBook(title, author);\r\n    setTitle(\"\");\r\n    setAuthor(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"book title\"\r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"book author\"\r\n        value={author}\r\n        onChange={e => setAuthor(e.target.value)}\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n};\r\nexport default NewBook;\r\n","import React from \"react\";\nimport BookContextProvider from \"./context/bookContext\";\nimport Navbar from \"./component/Navbar\";\nimport BookList from \"./component/BookList\";\nimport NewBook from \"./component/NewBook\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <h1>Context App</h1>\n        <Navbar />\n        <BookList />\n        <NewBook />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}